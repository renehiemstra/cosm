name: CI/CD for Cosm Terminal App

on:
  push:
    branches:
      - '**'  # Run tests on all branches
    tags:
      - 'v*'  # Run build and release for tagged versions
  pull_request:
    branches:
      - '**'  # Run tests on pull requests to all branches

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Run tests
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            GOARCH=arm64 go test ./... -v
          else
            GOARCH=amd64 go test ./... -v
          fi

  build:
    name: Build and Archive
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: linux
            goarch: arm64  # Only linux-amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install zip for macOS builds
        if: matrix.goos == 'darwin'
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Run tests
        run: go test ./... -v

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "Building cosm-${{ matrix.goos }}-${{ matrix.goarch }}"
          go build -o cosm-${{ matrix.goos }}-${{ matrix.goarch }} -ldflags "-X main.version=${{ github.ref_name }}"
          chmod +x cosm-${{ matrix.goos }}-${{ matrix.goarch }}
          ls -l cosm-${{ matrix.goos }}-${{ matrix.goarch }} || { echo "Binary not created"; exit 1; }

      - name: Archive binary
        run: |
          if [ "${{ matrix.goos }}" = "linux" ]; then
            echo "Archiving cosm-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz"
            tar -czvf cosm-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz cosm-${{ matrix.goos }}-${{ matrix.goarch }} || { echo "Tar failed"; exit 1; }
            ls -l cosm-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz || { echo "Archive not created"; exit 1; }
          else
            echo "Archiving cosm-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
            zip cosm-${{ matrix.goos }}-${{ matrix.goarch }}.zip cosm-${{ matrix.goos }}-${{ matrix.goarch }} || { echo "Zip failed"; exit 1; }
            ls -l cosm-${{ matrix.goos }}-${{ matrix.goarch }}.zip || { echo "Archive not created"; exit 1; }
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cosm-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            cosm-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
            cosm-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Grant write access for creating releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: cosm-*
          merge-multiple: true

      - name: List artifacts for debugging
        run: |
          echo "Artifact directory structure:"
          find artifacts -type f -ls
          echo "Current directory contents:"
          ls -lR

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/cosm-linux-amd64.tar.gz
            artifacts/cosm-darwin-amd64.zip
            artifacts/cosm-darwin-arm64.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}